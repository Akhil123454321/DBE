const express = require('express')
const path = require('path')
const bodyparser = require('body-parser')
const { request } = require('express')
const bcrypt = require('bcrypt')
const mongoose =  require('mongoose')
const User = require('./models/user_details')
var app = express()

// const DBpassword = process.env.DB_PASSWORD
// const DBusername = process.env.DB_USERNAME

//database connection string generated by the mongoDB atlast platform
const dbURI = "mongodb+srv://Akhil:test12345@backenddbe.xuiyb.mongodb.net/cluster0?retryWrites=true&w=majority"

//using mongoose's inbuilt connect function to connect to the database
const connectToDB = async()=>{  //parameters passed in this object prevent deprication error when connecting to the DB

    try{
        await mongoose.connect(dbURI, {useNewUrlParser: true, useUnifiedTopology: true} )
        console.log("connected to db", dbURI);
    }
    catch(error){
        console.error(error.message)
    }
    // .then((result)=>{
    //     console.log("App is connected to DB");
    // })
    // .catch((error)=>{
    //     console.log(error);
    // })
}
connectToDB()

app.use(express.static(__dirname + '/public/'))

app.set('views', path.join(__dirname + "/public/views/"))
app.set('view engine','hbs')

var urlencodedParser = bodyparser.urlencoded({ extended: false })


app.get('/', (request, response)=>{
    response.render('home')
})

app.get('/signup', (request, response)=>{
    response.render('register')
})
app.post('/signup', urlencodedParser, async (request, response)=>{
    console.log(request.body); //logging the user provided info for error checking
    password = request.body.pass //storing the user provided  password in a variable called password
    secondPass = request.body.repPass //storing the content of the confirm password field in a variable called second Pass

    //querying the mongoDB database to check if an account with the user provided name and email already exists or not. Both these functions return a JSON object.
    
    username = async ()=>{User.find({fname: request.body.fname})} 
    email = async ()=> {User.find({email: request.body.email})}   

    //checking the length of the JSON object. If length of object is greater than 0, it means an account exists, else it does not. 
    if (username.length == 0 || email.length == 0 ) //checking if the two passowrd fields are the same 
    {
        if(password == secondPass){
            salt = await bcrypt.genSalt(10) //generating the salt
            hashedPass = await bcrypt.hash(password, salt) //hashing the password with the previously generated salt
            console.log(hashedPass) //logging the hashed password for error checking

        }
    }
    else{
        response.render('register', {signupFail: "Username or email already exist!"})
    }
})

app.get('/login', (request, response)=>{
    response.render('login')
})

 app.post('/login', urlencodedParser, (request, response)=>{
    console.log(request.body)
    loginresult = async ()=>{User.find({email: request.body.email}, {password: request.body.password})} //querying the database to find results for the user provided email and passowrd

    if(loginresult.length > 0){ //checking if an account with the provided credentials exists or not
        response.redirect('/trial')
    }
    else{
        response.render('login', {loginFail: "Email or password is incorrect!"})
    }

})

app.get('/trial', (request, response)=>{
    response.render('index')
})
const PORT = process.env.PORT || 3000
app.listen(PORT, ()=>{
    console.log(`App is listening on port ${PORT}`);
})
